version: '2.4'


x-network:
  &network
  restart: unless-stopped
  networks:
    - proxy
x-backend:
  &backend
  stdin_open: true
  tty: true
  env_file:
    - .env

  depends_on:
    traefik:
      condition: service_healthy
services:
  rails:
    <<: *backend
    <<: *network
    image: cience/go-chat:aws-prod-img
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        RUBY_VERSION: '2.7.5'
        PG_MAJOR: '14'
        NODE_MAJOR: '16'
        YARN_VERSION: '1.13.0'
        BUNDLER_VERSION: '2.3.15'
        APP_ENV: 'production'
    #command: sleep infinity
    command: ./bin/docker-compose-web
    labels:
      - org.label-schema.group=rails
      - traefik.port=3000
      - traefik.enable=true
      - "traefik.http.routers.chaskiq.rule=Host(`chaskiq.eteam.io`)"
      - "traefik.http.services.chaskiq.loadbalancer.server.port=3000"
      - "traefik.http.routers.chaskiq.tls=true"
    # ports:
    #   - '3000:3000'

  sidekiq:
    image: cience/go-chat:aws-prod-img
    <<: *backend
    <<: *network
    command: bundle exec sidekiq -C config/sidekiq.yml

  traefik:
    image: "traefik:v2.9"
    <<: *network
    healthcheck:
      test: "traefik healthcheck --ping"
      interval: 1s
      timeout: 3s
      retries: 30
    logging:            
      driver: "json-file"    
      options:          
        max-size: "200k"    
        max-file: "10"
    command:
      #- "--log.level=DEBUG"
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.file.directory=/etc/traefik/dynamic_conf
      - --providers.file.watch=true
      - --api
      - --ping=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik/certs/:/certs/:ro
      - ./traefik/traefik.yml:/etc/traefik/dynamic_conf/conf.yml:ro
    labels:
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

networks:
  proxy:
    external: true
