version: '2.4'

x-app:
  &app
  environment:
    &env
    PORT: 3000
    NODE_ENV: production
    RAILS_ENV: ${RAILS_ENV:-production}
    ANYCABLE_DEBUG: ${DEBUG:-0}
    ANYCABLE_RPC_HOST: 0.0.0.0:50051
    SECRET_KEY_BASE: 1234567890
    RAILS_SERVE_STATIC_FILES: "true"
    HOST: "https://chaskiq.eteam.io"
    ASSET_HOST: "https://chaskiq.eteam.io"
    WS: "wss://chaskiq.eteam.io/cable"
    AWS_ACCESS_KEY_ID: "xxxxxxxxx"
    AWS_SECRET_ACCESS_KEY: "xxxxxxxxxxx"
    AWS_S3_BUCKET: "xxxxxxxx"
    AWS_S3_REGION: "us-east-1"
    FULLCONTACT_TOKEN: "xxxxxxxxxxxxxx"
    ADMIN_EMAIL: "admin@eteam.io"
    ADMIN_PASSWORD: "123456"
    DEFAULT_SENDER_EMAIL: "admin@eteam.io"
    DEFAULT_OUTGOING_EMAIL_DOMAIN: "mail.eteam.io"
    SNS_CONFIGURATION_SET: "metrics"
    DEFAULT_GEOCODER_SERVICE: "maxmind_local"

  tmpfs:
    - /tmp
x-network:
  &network
  restart: unless-stopped
  networks:
    - proxy
x-backend:
  &backend
  <<: *app
  stdin_open: true
  tty: true
  volumes:
    - .:/app:cached
    - rails_cache:/app/tmp/cache
    - bundle:/usr/local/bundle
    - node_modules:/app/node_modules
    - packs:/app/public/packs
    - .dockerdev/.psqlrc:/root/.psqlrc:ro
    - .dockerdev/.bashrc:/root/.bashrc:ro
  environment:
    <<: *env
    REDIS_URL: redis://redis:6379/
    DATABASE_URL: postgres://postgres:password@postgres:5432
    BOOTSNAP_CACHE_DIR: /usr/local/bundle/_bootsnap
    WEBPACKER_DEV_SERVER_HOST: webpacker
    DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: 1
    WEB_CONCURRENCY: 1
    HISTFILE: /app/log/.bash_history
    PSQL_HISTFILE: /app/log/.psql_history
    EDITOR: vi
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    traefik:
      condition: service_healthy
services:
  rails:
    <<: *backend
    <<: *network
    image: eteam/chaskiq:1.1.0
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        RUBY_VERSION: '2.7.5'
        PG_MAJOR: '14'
        NODE_MAJOR: '16'
        YARN_VERSION: '1.13.0'
        BUNDLER_VERSION: '2.3.15'
        APP_ENV: 'production'
    #command: sleep infinity
    command: ./bin/docker-compose-web
    labels:
      - org.label-schema.group=rails
      - traefik.port=3000
      - traefik.enable=true
      - "traefik.http.routers.chaskiq.rule=Host(`chaskiq.eteam.io`)"
      - "traefik.http.services.chaskiq.loadbalancer.server.port=3000"
      - "traefik.http.routers.chaskiq.tls=true"
    # ports:
    #   - '3000:3000'

  sidekiq:
    image: eteam/chaskiq:1.1.0
    <<: *backend
    <<: *network
    command: bundle exec sidekiq -C config/sidekiq.yml

  postgres:
    image: postgres:14-alpine
    <<: *network
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      #POSTGRES_USER: postgresql
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PSQL_HISTFILE: /root/log/.psql_history
    ports:
      - 5432
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s

  redis:
    image: redis:5-alpine
    <<: *network
    volumes:
      - redis:/data
    ports:
      - 6379
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30

  traefik:
    image: "traefik:v2.9"
    #image: "traefik:v2.2"
    <<: *network
    healthcheck:
      test: "traefik healthcheck --ping"
      interval: 1s
      timeout: 3s
      retries: 30
    logging:            
      driver: "json-file"    
      options:          
        max-size: "200k"    
        max-file: "10"
    command:
      #- "--log.level=DEBUG"
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.file.directory=/etc/traefik/dynamic_conf
      - --providers.file.watch=true
      - --api
      - --ping=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik/certs/:/certs/:ro
      - ./traefik/htpass:/etc/traefik/.htpasswd
      - ./traefik/traefik.yml:/etc/traefik/dynamic_conf/conf.yml:ro
    labels:
      - "traefik.http.middlewares.authtraefik.basicauth.usersfile=/etc/traefik/.htpasswd"
      # Dashboard
      - "traefik.http.routers.http-catchall.middlewares=test-auth"
      - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"
      - "traefik.http.routers.traefik.rule=Host(`2.eteam.io`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.middlewares=authtraefik"


      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      


volumes:
  postgres: null
  redis: null
  bundle: null
  node_modules: null
  rails_cache: null
  packs: null

networks:
  proxy:
    external: true
